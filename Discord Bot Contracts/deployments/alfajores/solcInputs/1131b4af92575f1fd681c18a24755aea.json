{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/celoFaucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nerror Faucet_WalletInTimeLock(\r\n    address sender,\r\n    uint256 timeLock,\r\n    uint256 currentTime\r\n);\r\nerror Faucet_NoBalanceInFaucet();\r\nerror Faucet_NotEnoughBalanceInUserWallet(address sender, uint256 value);\r\nerror Faucet_SomethingWentWrong();\r\nerror Faucet_InsufficientAllowance();\r\n\r\ncontract Faucet {\r\n    address owner;\r\n    mapping(address => uint256) private s_timeLocksCelo;\r\n    uint256 private constant CELO_PER_WITHDRAW = 0.1 ether;\r\n    uint256 private constant TIME_LOCK_PERIOD = 1 days;\r\n\r\n    event Deposit(address indexed sender, uint256 indexed value);\r\n    event Withdraw(address indexed receiver, uint256 indexed value);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function deposit() public payable {\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(address user) public {\r\n        if (\r\n            !(s_timeLocksCelo[user] == 0) &&\r\n            s_timeLocksCelo[user] > block.timestamp\r\n        ) {\r\n            revert Faucet_WalletInTimeLock(\r\n                user,\r\n                s_timeLocksCelo[user],\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        if (address(this).balance == 0) {\r\n            revert Faucet_NoBalanceInFaucet();\r\n        }\r\n\r\n        s_timeLocksCelo[user] = block.timestamp + TIME_LOCK_PERIOD;\r\n        payable(user).transfer(CELO_PER_WITHDRAW);\r\n        emit Withdraw(user, CELO_PER_WITHDRAW);\r\n    }\r\n\r\n\r\n    // recieve function\r\n    receive() external payable {\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    // getters\r\n\r\n    function getWalletTimeLockCheck(address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return s_timeLocksCelo[user];\r\n    }\r\n\r\n    function getFaucetCeloBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}